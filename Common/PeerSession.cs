using System;
using System.Runtime.Serialization;

namespace P2PBackup.Common {

	public enum SessionType{Unknown=0, Backup=1, Recover=2, Store=3, RecoverData=4, Clean=5, CleanData=6}; 

	public class PeerSession : IEquatable<PeerSession>{

		[DataMember]
		[DisplayFormatOption(Size=6)]
		public long Id{get;set;}

		[DataMember]
		[DisplayFormatOption(Size=25)]
		public string Name{get;set;}

		[DataMember]
		[DisplayFormatOption(Size=15)]
		public SessionType Kind{get;set;}

		[DataMember]
		[DisplayFormatOption(Size=7)]
		public long TaskId{get; set;}

		[DataMember]
		[DisplayFormatOption(Size=3)]
		public int Budget{get; private set;}

		[DataMember]
		[DisplayFormatOption(Size=3)]
		public Node FromNode{get;set;}

		[DataMember]
		[DisplayFormatOption(Size=3)]
		public Node ToNode{get;set;}

		[DataMember]
		[DisplayFormatOption(Size=3)]
		public int FromNodeId{
			get{
				if(this.FromNode != null)
					return FromNode.Id;
				else
					return 0;
			}
			set{}// no sense to set it, keep setter for WCF serialization purposes
		}
		
		[DataMember]
		[DisplayFormatOption(Size=3)]
		public int ToNodeId{
			get{
				if(this.ToNode != null)
					return ToNode.Id;
				else
					return 0;
			}
			set{}// no sense to set it, keep setter for WCF serialization purposes
		}

		[DataMember]
		[DisplayFormatOption(Size=20)]
		public DateTime Started{get;private set;}

		[DataMember]
		[DisplayFormatOption(Size=20)]
		public DataProcessingFlags Flags{get; set;}

		/// <summary>
		/// The 'Secret' is a random string generated by Hub and transferred to both nodes (the sending one and the receiving one)
		/// they encrypt and sens this secret to each other, to confirm that they are both talking to someone they 'trust'
		/// This "3 peers handshake" limits possible node identity usurpation in untrusted environments/networks
		/// </summary>
		/// <value>
		/// The secret.
		/// </value>
		[DisplayFormatOption(Display=false)]
		public string Secret{get; set;}

		[DisplayFormatOption(Size=7,FormatAs=DisplayFormat.Size)]
		public long RawHandledData{get;set;}

		[DisplayFormatOption(Size=7,FormatAs=DisplayFormat.Size)]
		public long RealHandledData{get;set;}

		private bool usageConfirmedByClient = false;
		private bool usageConfirmedByStorage = false;

		/// <summary>
		/// From hub's point of view, there's only 1 backup session instanc for a given session.
		/// But from clients point of view, there's 1 session for the requestor (kind Backup)
		/// and 1 for the storage node (kind Store)
		/// When a session ends on  client (because it's done transferring or because an error occured),
		/// both of them will warn the hub. We use this double-confirmation (in ideal case) to ensure we 
		/// track correct space usage for storage nodes.
		/// If a node disconnects or crashes, we wan still have the other peer to report storage space usage.
		/// </summary>
		/// <param name='s'>
		/// S.
		/// </param>
		public void SetUsage(PeerSession s){
			if(s.Kind == SessionType.Backup && !usageConfirmedByClient){
				RawHandledData = s.RawHandledData;
				RealHandledData = s.RealHandledData;
				usageConfirmedByClient = true;
			}
			else if(s.Kind == SessionType.Store && !usageConfirmedByStorage){
				RealHandledData = s.RealHandledData;
				usageConfirmedByStorage = true;
			}
		}


		public bool IsStorageUsageConfirmed(){
			return usageConfirmedByClient && usageConfirmedByStorage;
		}

		public bool IsStorageUsagePartiallyConfirmed(){
			return usageConfirmedByClient || usageConfirmedByStorage;
		}

		public PeerSession(){
			this.Started = DateTime.UtcNow;
		}

		public void RenewBudget(int newBudget){
			this.Budget = newBudget;
			usageConfirmedByClient = false;
			usageConfirmedByStorage = false;
		}
		/// <summary>
		/// Determines whether the specified <see cref="P2PBackup.Common.PeerSession"/> is equal to the current <see cref="P2PBackup.Common.PeerSession"/>.
		/// </summary>
		/// <param name='other'>
		/// The <see cref="P2PBackup.Common.PeerSession"/> to compare with the current <see cref="P2PBackup.Common.PeerSession"/>.
		/// </param>
		/// <returns>
		/// <c>true</c> if the specified <see cref="P2PBackup.Common.PeerSession"/> is equal to the current
		/// <see cref="P2PBackup.Common.PeerSession"/>; otherwise, <c>false</c>.
		/// </returns>Determines if 2 sessions (one coming from client and the other being kept on Hub list) are equals.
		/// Some parameters may differ between client-side and hub-side, so only compare relevant properties
		public bool Equals(PeerSession other){
			if(this.Id == other.Id
			   && this.FromNode == other.FromNode
			   && this.ToNode == other.ToNode
			   && this.TaskId == other.TaskId)
				return true;
			return false;
		}
	}
}

