//
// RijndaelTest.cs - NUnit Test Cases for Rijndael
//
// Author:
//	Sebastien Pouliot (sebastien@ximian.com)
//
// (C) 2002 Motus Technologies Inc. (http://www.motus.com)
// Copyright (C) 2004 Novell, Inc (http://www.novell.com)
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

using NUnit.Framework;
using System;
using System.Security.Cryptography;
using System.Text;

namespace Crimson.Test.Base {

	// Rijndael supports extra block size (192 and 256 bits)

	public abstract class RijndaelTest : AesTest {
	
		[Test]
		public void k128b192_ECB_None ()
		{
			byte[] key = { 0xA5, 0x7F, 0xA2, 0x9F, 0xDA, 0xEE, 0x56, 0x2E, 0xF9, 0x3A, 0xEE, 0x1E, 0x30, 0x46, 0x80, 0x66 };
			// not used for ECB but make the code more uniform
			byte[] iv = { 0x81, 0xE8, 0x4F, 0x8A, 0xFC, 0xD0, 0x12, 0xB3, 0xF8, 0x1F, 0x30, 0xE2, 0x40, 0x90, 0xFB, 0x96, 0x88, 0xC0, 0xC8, 0xF7, 0x4A, 0x3E, 0xC0, 0x73 };
			byte[] expected = { 0xC1, 0xC5, 0x13, 0x1B, 0x11, 0x93, 0x52, 0xE6, 0x4A, 0xA3, 0xF8, 0xE7, 0x28, 0xDE, 0x02, 0x9A, 0x5D, 0x2B, 0x14, 0x6A, 0x5D, 0x0F, 0x24, 0x8F, 0xC1, 0xC5, 0x13, 0x1B, 0x11, 0x93, 0x52, 0xE6, 0x4A, 0xA3, 0xF8, 0xE7, 0x28, 0xDE, 0x02, 0x9A, 0x5D, 0x2B, 0x14, 0x6A, 0x5D, 0x0F, 0x24, 0x8F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.ECB;
			algo.Padding = PaddingMode.None;
			algo.BlockSize = 192;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k128b192_ECB_None Encrypt", expected, output);

			// in ECB the first 2 blocks should be equals (as the IV is not used)
			byte[] block1 = new byte[blockLength];
			Array.Copy (output, 0, block1, 0, blockLength);
			byte[] block2 = new byte[blockLength];
			Array.Copy (output, blockLength, block2, 0, blockLength);
			AssertEquals ("k128b192_ECB_None b1==b2", block1, block2);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k128b192_ECB_None Decrypt", input, original);
		}

		[Test]
		public void k128b192_ECB_Zeros ()
		{
			byte[] key = { 0xDF, 0x1B, 0x73, 0xA3, 0xE3, 0x53, 0x75, 0x92, 0x2B, 0xD0, 0x44, 0x35, 0x94, 0xF5, 0xB2, 0xE7 };
			// not used for ECB but make the code more uniform
			byte[] iv = { 0x21, 0x82, 0x61, 0x4A, 0x57, 0xC0, 0x7D, 0x96, 0xFF, 0xC2, 0x08, 0xC1, 0x6C, 0xDF, 0x7C, 0x65, 0xC1, 0x8B, 0xFE, 0x5E, 0xD5, 0x82, 0xAD, 0x98 };
			//byte[] expected = { 0xC9, 0x4E, 0xE0, 0x8F, 0x95, 0x55, 0x52, 0x1A, 0x75, 0xA9, 0x92, 0x1D, 0xFA, 0x30, 0xBD, 0xB8, 0x55, 0xA7, 0x8B, 0xF9, 0x58, 0xE9, 0x1B, 0x4C, 0xC9, 0x4E, 0xE0, 0x8F, 0x95, 0x55, 0x52, 0x1A, 0x75, 0xA9, 0x92, 0x1D, 0xFA, 0x30, 0xBD, 0xB8, 0x55, 0xA7, 0x8B, 0xF9, 0x58, 0xE9, 0x1B, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.ECB;
			algo.Padding = PaddingMode.Zeros;
			algo.BlockSize = 192;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			// some exception can be normal... other not so!
			try {
				Encrypt (encryptor, input, output);
			}
			catch (Exception e) {
				if (e.Message != "Input buffer contains insufficient data. ")
					Assert.Fail ("k128b192_ECB_Zeros: This isn't the expected exception: " + e.ToString ());
			}
		}

		[Test]
		public void k128b192_ECB_PKCS7 ()
		{
			byte[] key = { 0x78, 0x75, 0x1F, 0xE7, 0xFA, 0x1F, 0xF4, 0x2D, 0x31, 0x36, 0x14, 0xA5, 0xB8, 0x31, 0x97, 0x47 };
			// not used for ECB but make the code more uniform
			byte[] iv = { 0x91, 0x2F, 0xDC, 0x19, 0xC7, 0x6C, 0x67, 0x4A, 0x51, 0xE7, 0x08, 0xA5, 0xF9, 0xC6, 0xC3, 0x56, 0xF2, 0xED, 0xBD, 0xC9, 0x71, 0x9F, 0x02, 0xAF };
			byte[] expected = { 0xB1, 0x0D, 0xFD, 0xB0, 0x89, 0x3C, 0xF5, 0x52, 0x62, 0x22, 0x41, 0x20, 0xE4, 0x34, 0x03, 0x78, 0x37, 0xC2, 0xB1, 0xF9, 0x26, 0x0A, 0x7F, 0x0E, 0xB1, 0x0D, 0xFD, 0xB0, 0x89, 0x3C, 0xF5, 0x52, 0x62, 0x22, 0x41, 0x20, 0xE4, 0x34, 0x03, 0x78, 0x37, 0xC2, 0xB1, 0xF9, 0x26, 0x0A, 0x7F, 0x0E, 0xF9, 0x7A, 0x2D, 0xF9, 0x5C, 0xD5, 0xEA, 0x06, 0x18, 0xC9, 0x06, 0xD4, 0xD0, 0x0B, 0xD6, 0x19, 0x4E, 0x7E, 0x9C, 0x5F, 0xDE, 0x3D, 0xB4, 0x2A };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.ECB;
			algo.Padding = PaddingMode.PKCS7;
			algo.BlockSize = 192;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k128b192_ECB_PKCS7 Encrypt", expected, output);

			// in ECB the first 2 blocks should be equals (as the IV is not used)
			byte[] block1 = new byte[blockLength];
			Array.Copy (output, 0, block1, 0, blockLength);
			byte[] block2 = new byte[blockLength];
			Array.Copy (output, blockLength, block2, 0, blockLength);
			AssertEquals ("k128b192_ECB_PKCS7 b1==b2", block1, block2);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k128b192_ECB_PKCS7 Decrypt", input, original);
		}

		[Test]
		public void k128b192_CBC_None ()
		{
			byte[] key = { 0xBD, 0x01, 0x0F, 0x53, 0x53, 0x14, 0x90, 0x58, 0x22, 0x81, 0x6F, 0x79, 0x8C, 0x68, 0x21, 0x21 };
			byte[] iv = { 0xEE, 0x7B, 0xC0, 0x5F, 0x32, 0x59, 0x56, 0xB6, 0x7C, 0x17, 0x04, 0xC5, 0x64, 0x6A, 0xA1, 0x35, 0x6F, 0xAC, 0xB8, 0xCE, 0xFA, 0xCC, 0x76, 0xBE };
			byte[] expected = { 0x5D, 0xF5, 0x03, 0xD7, 0x17, 0xEE, 0x05, 0x18, 0x63, 0x99, 0xAB, 0x58, 0xBB, 0xC0, 0x04, 0x0A, 0x52, 0x1D, 0x4E, 0xA4, 0x8B, 0x68, 0xA3, 0x63, 0x7A, 0xBD, 0xAF, 0x0C, 0x85, 0x5D, 0xF8, 0x0D, 0x7A, 0x01, 0xF0, 0x76, 0x24, 0xF1, 0x8A, 0x95, 0x8B, 0xB2, 0xC0, 0xF7, 0x1D, 0xC5, 0x0E, 0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.CBC;
			algo.Padding = PaddingMode.None;
			algo.BlockSize = 192;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k128b192_CBC_None Encrypt", expected, output);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k128b192_CBC_None Decrypt", input, original);
		}

		[Test]
		public void k128b192_CBC_Zeros ()
		{
			byte[] key = { 0xE2, 0x9C, 0x2A, 0xAA, 0xD0, 0x02, 0xDD, 0xDF, 0xFE, 0xD7, 0xB0, 0x21, 0x1E, 0x52, 0xE5, 0x25 };
			byte[] iv = { 0xED, 0xF5, 0xD7, 0xF7, 0x8D, 0xB6, 0x91, 0x00, 0x81, 0x88, 0x75, 0x8C, 0x61, 0x13, 0x84, 0x46, 0x2A, 0x53, 0x02, 0xE9, 0xBB, 0x01, 0xF8, 0x24 };
			//byte[] expected = { 0x55, 0x48, 0x90, 0x63, 0x5B, 0x93, 0x09, 0xA7, 0xF7, 0xB2, 0xC0, 0x4D, 0xB1, 0x1A, 0xF7, 0xC7, 0xF7, 0xC0, 0xB6, 0x29, 0x7A, 0x50, 0x4E, 0x52, 0x2F, 0x68, 0x49, 0x92, 0x80, 0x0D, 0xBD, 0x89, 0x34, 0x84, 0x60, 0x87, 0x2C, 0x50, 0x65, 0xFF, 0xAE, 0x0E, 0x7B, 0x30, 0x3D, 0xFA, 0x93, 0xE6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.CBC;
			algo.Padding = PaddingMode.Zeros;
			algo.BlockSize = 192;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			// some exception can be normal... other not so!
			try {
				Encrypt (encryptor, input, output);
			}
			catch (Exception e) {
				if (e.Message != "Input buffer contains insufficient data. ")
					Assert.Fail ("k128b192_CBC_Zeros: This isn't the expected exception: " + e.ToString ());
			}
		}


		[Test]
		public void k128b192_CBC_PKCS7 ()
		{
			byte[] key = { 0x14, 0x6C, 0x36, 0x5E, 0x22, 0xE9, 0x25, 0x1E, 0xC9, 0x1F, 0xA7, 0xC9, 0xA5, 0x19, 0x2C, 0x09 };
			byte[] iv = { 0xE2, 0x6F, 0xA7, 0xDC, 0x36, 0x32, 0xF7, 0x28, 0x8B, 0x09, 0x78, 0xB9, 0x30, 0x6A, 0x3F, 0xD0, 0xA8, 0x5E, 0x1F, 0x7D, 0x8F, 0xDE, 0x5B, 0xA4 };
			byte[] expected = { 0x9D, 0x08, 0xFD, 0xDE, 0x64, 0x97, 0x1D, 0x88, 0xB4, 0xCD, 0x70, 0xDD, 0xCC, 0x95, 0x1C, 0xAE, 0x01, 0x4B, 0x14, 0x19, 0x69, 0x58, 0xCE, 0x14, 0xA6, 0xF6, 0xD0, 0x25, 0xCE, 0xD6, 0xBB, 0xD5, 0x8C, 0xF6, 0xBF, 0x54, 0x66, 0x1D, 0xAE, 0x03, 0x6C, 0x81, 0xBF, 0xC6, 0x06, 0xB3, 0x64, 0x39, 0x73, 0x0A, 0x54, 0xB8, 0x3F, 0x3D, 0x1D, 0xFA, 0xB8, 0xBB, 0x53, 0x34, 0xEC, 0x69, 0xBD, 0xC3, 0xC1, 0xB2, 0x8D, 0x7D, 0x08, 0xE4, 0xFA, 0x82 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.CBC;
			algo.Padding = PaddingMode.PKCS7;
			algo.BlockSize = 192;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k128b192_CBC_PKCS7 Encrypt", expected, output);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k128b192_CBC_PKCS7 Decrypt", input, original);
		}


		/* Invalid parameters k128b192_CTS_None. Why? Specified cipher mode is not valid for this algorithm. */

		/* Invalid parameters k128b192_CTS_Zeros. Why? Specified cipher mode is not valid for this algorithm. */

		/* Invalid parameters k128b192_CTS_PKCS7. Why? Specified cipher mode is not valid for this algorithm. */

		/* Invalid parameters k128b192_CFB8_None. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k128b192_CFB8_Zeros. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k128b192_CFB8_PKCS7. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k128b192_OFB8_None. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k128b192_OFB8_Zeros. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k128b192_OFB8_PKCS7. Why? Output feedback mode (OFB) is not supported by this implementation. */
		[Test]
		public void k128b256_ECB_None ()
		{
			byte[] key = { 0xD5, 0xB9, 0x92, 0x27, 0xC0, 0xBB, 0x86, 0x06, 0x19, 0xD9, 0xA4, 0x1B, 0x9E, 0x7A, 0xF0, 0x3D };
			// not used for ECB but make the code more uniform
			byte[] iv = { 0x3C, 0x72, 0xD4, 0xBA, 0xC8, 0xCA, 0xAD, 0x8B, 0x94, 0x00, 0xF3, 0x4E, 0xE9, 0xAC, 0xFB, 0x15, 0xA2, 0x06, 0xFE, 0xA3, 0x33, 0x18, 0x48, 0x55, 0xD5, 0x6B, 0x8F, 0x13, 0xEF, 0xB6, 0x34, 0xF8 };
			byte[] expected = { 0x9A, 0x86, 0x3A, 0xE6, 0x23, 0x50, 0x4D, 0xBD, 0x4B, 0xD3, 0x1A, 0xDE, 0x83, 0x13, 0x4A, 0x82, 0xEF, 0x99, 0x7D, 0x19, 0xB0, 0x01, 0x4E, 0x46, 0x4B, 0xCF, 0x99, 0x66, 0x10, 0x23, 0x6E, 0x6C, 0x9A, 0x86, 0x3A, 0xE6, 0x23, 0x50, 0x4D, 0xBD, 0x4B, 0xD3, 0x1A, 0xDE, 0x83, 0x13, 0x4A, 0x82, 0xEF, 0x99, 0x7D, 0x19, 0xB0, 0x01, 0x4E, 0x46, 0x4B, 0xCF, 0x99, 0x66, 0x10, 0x23, 0x6E, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.ECB;
			algo.Padding = PaddingMode.None;
			algo.BlockSize = 256;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k128b256_ECB_None Encrypt", expected, output);

			// in ECB the first 2 blocks should be equals (as the IV is not used)
			byte[] block1 = new byte[blockLength];
			Array.Copy (output, 0, block1, 0, blockLength);
			byte[] block2 = new byte[blockLength];
			Array.Copy (output, blockLength, block2, 0, blockLength);
			AssertEquals ("k128b256_ECB_None b1==b2", block1, block2);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k128b256_ECB_None Decrypt", input, original);
		}

		[Test]
		public void k128b256_ECB_Zeros ()
		{
			byte[] key = { 0x3C, 0xA6, 0xD7, 0xDA, 0xE3, 0x4D, 0x32, 0x67, 0xA8, 0xF5, 0xFF, 0xFF, 0xEE, 0xE8, 0xD4, 0xB2 };
			// not used for ECB but make the code more uniform
			byte[] iv = { 0xC8, 0x0A, 0x40, 0x30, 0x7C, 0x7E, 0x75, 0xDE, 0x71, 0x64, 0x59, 0xCE, 0x03, 0x40, 0x8F, 0x50, 0xC7, 0x5E, 0xA2, 0x27, 0x5F, 0x12, 0x57, 0xF4, 0xB7, 0xAD, 0x95, 0xAD, 0x95, 0x84, 0xBE, 0x3C };
			//byte[] expected = { 0x6D, 0x57, 0xCA, 0xED, 0x29, 0xBA, 0xA6, 0x3A, 0x3D, 0x02, 0xE1, 0x21, 0x39, 0xB0, 0x34, 0x41, 0xFC, 0xAC, 0x55, 0x8C, 0x61, 0xAE, 0x18, 0x7D, 0x7A, 0x41, 0x81, 0x1C, 0x53, 0x5F, 0x3D, 0xB1, 0x6D, 0x57, 0xCA, 0xED, 0x29, 0xBA, 0xA6, 0x3A, 0x3D, 0x02, 0xE1, 0x21, 0x39, 0xB0, 0x34, 0x41, 0xFC, 0xAC, 0x55, 0x8C, 0x61, 0xAE, 0x18, 0x7D, 0x7A, 0x41, 0x81, 0x1C, 0x53, 0x5F, 0x3D, 0xB1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.ECB;
			algo.Padding = PaddingMode.Zeros;
			algo.BlockSize = 256;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			// some exception can be normal... other not so!
			try {
				Encrypt (encryptor, input, output);
			}
			catch (Exception e) {
				if (e.Message != "Input buffer contains insufficient data. ")
					Assert.Fail ("k128b256_ECB_Zeros: This isn't the expected exception: " + e.ToString ());
			}
		}

		[Test]
		public void k128b256_ECB_PKCS7 ()
		{
			byte[] key = { 0xED, 0xBA, 0x84, 0x92, 0x50, 0x93, 0x9B, 0xE4, 0xC4, 0x83, 0x31, 0x8E, 0x11, 0x86, 0xAE, 0xC9 };
			// not used for ECB but make the code more uniform
			byte[] iv = { 0x43, 0x98, 0x73, 0xFE, 0x77, 0x4D, 0x75, 0x79, 0xC7, 0xEF, 0x5C, 0x89, 0xFA, 0x5E, 0x07, 0x85, 0x0B, 0x21, 0x59, 0x8B, 0x8A, 0x1D, 0x11, 0x07, 0xA0, 0xC4, 0x3E, 0x11, 0x7F, 0x5D, 0xFE, 0xEE };
			byte[] expected = { 0xA0, 0x56, 0xD6, 0x6B, 0x48, 0x77, 0xCC, 0x51, 0x0F, 0x04, 0x58, 0x16, 0x46, 0x04, 0x36, 0x66, 0xBB, 0x4D, 0x88, 0x71, 0xFF, 0x65, 0x0B, 0xFD, 0x52, 0x8D, 0xE8, 0xAF, 0x97, 0x78, 0xBD, 0x82, 0xA0, 0x56, 0xD6, 0x6B, 0x48, 0x77, 0xCC, 0x51, 0x0F, 0x04, 0x58, 0x16, 0x46, 0x04, 0x36, 0x66, 0xBB, 0x4D, 0x88, 0x71, 0xFF, 0x65, 0x0B, 0xFD, 0x52, 0x8D, 0xE8, 0xAF, 0x97, 0x78, 0xBD, 0x82, 0x66, 0x2C, 0x2B, 0x59, 0xC8, 0x47, 0x3E, 0xE0, 0xC4, 0xA5, 0x22, 0x79, 0x6C, 0xCF, 0x18, 0x10, 0xDA, 0xB5, 0xE9, 0xB1, 0x21, 0xCA, 0xCC, 0xD6, 0xF7, 0xDC, 0xA5, 0xD4, 0x29, 0x10, 0x8A, 0xA4 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.ECB;
			algo.Padding = PaddingMode.PKCS7;
			algo.BlockSize = 256;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k128b256_ECB_PKCS7 Encrypt", expected, output);

			// in ECB the first 2 blocks should be equals (as the IV is not used)
			byte[] block1 = new byte[blockLength];
			Array.Copy (output, 0, block1, 0, blockLength);
			byte[] block2 = new byte[blockLength];
			Array.Copy (output, blockLength, block2, 0, blockLength);
			AssertEquals ("k128b256_ECB_PKCS7 b1==b2", block1, block2);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k128b256_ECB_PKCS7 Decrypt", input, original);
		}

		[Test]
		public void k128b256_CBC_None ()
		{
			byte[] key = { 0x23, 0x09, 0x30, 0xC7, 0x01, 0x81, 0x1D, 0x2E, 0xD6, 0x6A, 0xC9, 0x99, 0x0D, 0x3D, 0x99, 0x79 };
			byte[] iv = { 0x24, 0x2B, 0xCF, 0xFF, 0x81, 0x8C, 0xBE, 0x55, 0x1D, 0x8A, 0xDA, 0xF8, 0x81, 0xA7, 0x5A, 0xD1, 0xA6, 0x88, 0xC6, 0x90, 0xC4, 0x33, 0xCD, 0x37, 0x11, 0xCC, 0x64, 0x42, 0xD8, 0x2C, 0xA6, 0xE0 };
			byte[] expected = { 0xEF, 0xA5, 0xAB, 0xDB, 0x71, 0xE3, 0x9A, 0x33, 0x45, 0x74, 0xB7, 0x90, 0xED, 0xD8, 0xDE, 0x33, 0x56, 0xEA, 0x75, 0xE0, 0x42, 0x51, 0xAD, 0xEE, 0x9C, 0x74, 0xC8, 0x6B, 0x99, 0x88, 0xD2, 0x13, 0xB2, 0x80, 0x5E, 0xB3, 0xDC, 0xE3, 0x49, 0x43, 0x86, 0x10, 0xC7, 0xCC, 0xE2, 0xE8, 0xCD, 0x79, 0x5C, 0x69, 0x19, 0xD0, 0xE2, 0x70, 0xB1, 0x25, 0x21, 0xB5, 0xC0, 0x69, 0xAB, 0x3D, 0x25, 0x9A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.CBC;
			algo.Padding = PaddingMode.None;
			algo.BlockSize = 256;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k128b256_CBC_None Encrypt", expected, output);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k128b256_CBC_None Decrypt", input, original);
		}

		[Test]
		public void k128b256_CBC_Zeros ()
		{
			byte[] key = { 0xB6, 0xE5, 0xA0, 0x6F, 0x35, 0xA9, 0x25, 0x31, 0x5B, 0x8C, 0x52, 0x87, 0x26, 0x80, 0xB1, 0x42 };
			byte[] iv = { 0xFD, 0x8E, 0xD8, 0x17, 0xEB, 0x9F, 0xC6, 0x5B, 0xD7, 0x42, 0xF4, 0x79, 0x68, 0x38, 0xEE, 0xC6, 0x15, 0x83, 0xFF, 0x18, 0xA5, 0x24, 0x80, 0x65, 0xCE, 0xF3, 0xED, 0xA8, 0x0E, 0x60, 0xB4, 0xA0 };
			//byte[] expected = { 0xC6, 0x0C, 0xE3, 0x6A, 0x8A, 0x98, 0xC2, 0xF7, 0x77, 0x59, 0x2C, 0x77, 0x88, 0x3F, 0xCE, 0x12, 0xFB, 0xFB, 0xB0, 0x20, 0xE5, 0xBC, 0xDB, 0x30, 0xE8, 0x1C, 0x19, 0xEA, 0x4C, 0x3A, 0x2E, 0xAF, 0x57, 0x4B, 0x05, 0xE8, 0xD4, 0xC9, 0xB2, 0xC4, 0x00, 0x35, 0xE0, 0x57, 0x7D, 0xAF, 0x11, 0xB4, 0xB2, 0x84, 0xCD, 0x7F, 0x6C, 0x6E, 0xD0, 0xDA, 0x58, 0x90, 0xF6, 0x9A, 0x51, 0x2C, 0x74, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.CBC;
			algo.Padding = PaddingMode.Zeros;
			algo.BlockSize = 256;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			// some exception can be normal... other not so!
			try {
				Encrypt (encryptor, input, output);
			}
			catch (Exception e) {
				if (e.Message != "Input buffer contains insufficient data. ")
					Assert.Fail ("k128b256_CBC_Zeros: This isn't the expected exception: " + e.ToString ());
			}
		}

		[Test]
		public void k128b256_CBC_PKCS7 ()
		{
			byte[] key = { 0xAE, 0x7A, 0xD9, 0x55, 0xBF, 0x55, 0xB2, 0x40, 0x4A, 0x48, 0x5F, 0x06, 0xAA, 0x04, 0x45, 0x0A };
			byte[] iv = { 0xB9, 0xD7, 0xC5, 0x09, 0x93, 0xED, 0x68, 0xC4, 0x5A, 0x82, 0x8F, 0xBD, 0x2F, 0xB4, 0x3B, 0x84, 0xBA, 0xE4, 0x46, 0x51, 0xAD, 0xAB, 0xA5, 0xCC, 0xB7, 0x59, 0x31, 0x9E, 0xBB, 0xFA, 0x54, 0x10 };
			byte[] expected = { 0xAC, 0xD7, 0x42, 0x01, 0x60, 0x36, 0xD3, 0xE1, 0xAE, 0x60, 0xC1, 0x5E, 0xAD, 0x4E, 0x81, 0xE1, 0x65, 0xFB, 0xF0, 0x06, 0x89, 0xC5, 0xAD, 0x71, 0x62, 0x81, 0x41, 0xC7, 0xC7, 0xC2, 0xAA, 0x1E, 0x76, 0x88, 0x41, 0x23, 0xFB, 0xFF, 0x44, 0x01, 0xA4, 0xB9, 0x61, 0xC0, 0x1B, 0x54, 0x09, 0x45, 0x1C, 0x17, 0xE3, 0x0A, 0x4A, 0x0A, 0xC5, 0x6F, 0x77, 0xB0, 0xDB, 0xE1, 0xD4, 0xCD, 0x28, 0xD6, 0xA6, 0x40, 0x8F, 0x2B, 0x49, 0x2C, 0xDF, 0x4D, 0x6D, 0x78, 0x24, 0x65, 0x37, 0x61, 0x05, 0xCD, 0xBC, 0x15, 0x37, 0x67, 0x65, 0xEF, 0xCB, 0x8A, 0xEE, 0x53, 0x9D, 0x29, 0x62, 0x73, 0x51, 0xD2 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.CBC;
			algo.Padding = PaddingMode.PKCS7;
			algo.BlockSize = 256;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k128b256_CBC_PKCS7 Encrypt", expected, output);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k128b256_CBC_PKCS7 Decrypt", input, original);
		}


		/* Invalid parameters k128b256_CTS_None. Why? Specified cipher mode is not valid for this algorithm. */

		/* Invalid parameters k128b256_CTS_Zeros. Why? Specified cipher mode is not valid for this algorithm. */

		/* Invalid parameters k128b256_CTS_PKCS7. Why? Specified cipher mode is not valid for this algorithm. */

		/* Invalid parameters k128b256_CFB8_None. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k128b256_CFB8_Zeros. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k128b256_CFB8_PKCS7. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k128b256_OFB8_None. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k128b256_OFB8_Zeros. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k128b256_OFB8_PKCS7. Why? Output feedback mode (OFB) is not supported by this implementation. */

		[Test]
		public void k192b192_ECB_None ()
		{
			byte[] key = { 0x33, 0x09, 0x20, 0xF4, 0x69, 0x76, 0x98, 0x57, 0x93, 0x1A, 0x37, 0x31, 0xFA, 0x2D, 0x49, 0xEA, 0xE4, 0xD4, 0x6C, 0xA5, 0x91, 0x2A, 0xD8, 0x54 };
			// not used for ECB but make the code more uniform
			byte[] iv = { 0x7F, 0x2E, 0xE0, 0x80, 0x52, 0x2F, 0x63, 0x3F, 0x8F, 0x09, 0x85, 0x3D, 0x21, 0x73, 0x40, 0x45, 0xB0, 0x85, 0xDE, 0xB9, 0xC0, 0xA1, 0x06, 0xB2 };
			byte[] expected = { 0x93, 0x0B, 0xF0, 0xA0, 0x0C, 0x79, 0x99, 0x40, 0x17, 0x62, 0xD6, 0xD8, 0x1C, 0x3B, 0xB3, 0x18, 0x57, 0xA6, 0x01, 0x68, 0xEA, 0x73, 0x9A, 0x0A, 0x93, 0x0B, 0xF0, 0xA0, 0x0C, 0x79, 0x99, 0x40, 0x17, 0x62, 0xD6, 0xD8, 0x1C, 0x3B, 0xB3, 0x18, 0x57, 0xA6, 0x01, 0x68, 0xEA, 0x73, 0x9A, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.ECB;
			algo.Padding = PaddingMode.None;
			algo.BlockSize = 192;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k192b192_ECB_None Encrypt", expected, output);

			// in ECB the first 2 blocks should be equals (as the IV is not used)
			byte[] block1 = new byte[blockLength];
			Array.Copy (output, 0, block1, 0, blockLength);
			byte[] block2 = new byte[blockLength];
			Array.Copy (output, blockLength, block2, 0, blockLength);
			AssertEquals ("k192b192_ECB_None b1==b2", block1, block2);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k192b192_ECB_None Decrypt", input, original);
		}

		[Test]
		public void k192b192_ECB_Zeros ()
		{
			byte[] key = { 0xB5, 0x06, 0x72, 0x5F, 0x4E, 0x37, 0x62, 0x8F, 0x68, 0xE5, 0x0A, 0x80, 0xC6, 0x39, 0xB9, 0x13, 0xC7, 0xD8, 0x74, 0x1F, 0xE8, 0xD1, 0x99, 0x9E };
			// not used for ECB but make the code more uniform
			byte[] iv = { 0x11, 0x49, 0xA6, 0x58, 0x8F, 0xF1, 0x8E, 0xB3, 0x19, 0x81, 0xFE, 0xB8, 0x09, 0x69, 0x3D, 0x01, 0x21, 0x08, 0xCD, 0x1D, 0xEB, 0x98, 0xA7, 0xF1 };
			//byte[] expected = { 0x42, 0xD5, 0xF0, 0x37, 0xFF, 0xBB, 0x81, 0xC1, 0x6F, 0x12, 0xCF, 0x65, 0x29, 0xC5, 0x88, 0xBE, 0x08, 0x88, 0xBF, 0x6F, 0xDF, 0x23, 0x82, 0x5E, 0x42, 0xD5, 0xF0, 0x37, 0xFF, 0xBB, 0x81, 0xC1, 0x6F, 0x12, 0xCF, 0x65, 0x29, 0xC5, 0x88, 0xBE, 0x08, 0x88, 0xBF, 0x6F, 0xDF, 0x23, 0x82, 0x5E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.ECB;
			algo.Padding = PaddingMode.Zeros;
			algo.BlockSize = 192;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			// some exception can be normal... other not so!
			try {
				Encrypt (encryptor, input, output);
			}
			catch (Exception e) {
				if (e.Message != "Input buffer contains insufficient data. ")
					Assert.Fail ("k192b192_ECB_Zeros: This isn't the expected exception: " + e.ToString ());
			}
		}

		[Test]
		public void k192b192_ECB_PKCS7 ()
		{
			byte[] key = { 0x40, 0xE3, 0xF1, 0x90, 0xC2, 0xA9, 0x59, 0xB8, 0x01, 0x72, 0x01, 0x1F, 0x10, 0x11, 0x0E, 0x8F, 0xA1, 0xF2, 0x62, 0xD7, 0x0A, 0x65, 0xCD, 0xC4 };
			// not used for ECB but make the code more uniform
			byte[] iv = { 0x06, 0x08, 0x07, 0xB3, 0x8F, 0x84, 0xD9, 0xB3, 0xF9, 0x11, 0xFC, 0x0B, 0x9C, 0xC4, 0x6E, 0x41, 0xE1, 0xCC, 0x6F, 0x26, 0x6D, 0x70, 0xC6, 0x47 };
			byte[] expected = { 0xCD, 0x70, 0x93, 0x83, 0x82, 0xB1, 0xA3, 0x74, 0x8A, 0xBD, 0x0C, 0x0D, 0x8B, 0x9F, 0x3C, 0xDF, 0xBC, 0x8E, 0x64, 0x6E, 0xF7, 0xF5, 0x10, 0x0E, 0xCD, 0x70, 0x93, 0x83, 0x82, 0xB1, 0xA3, 0x74, 0x8A, 0xBD, 0x0C, 0x0D, 0x8B, 0x9F, 0x3C, 0xDF, 0xBC, 0x8E, 0x64, 0x6E, 0xF7, 0xF5, 0x10, 0x0E, 0x2D, 0xB2, 0xBD, 0xA1, 0x21, 0x56, 0xD1, 0x33, 0x00, 0x1C, 0x71, 0xAF, 0x9A, 0x48, 0x24, 0x00, 0xED, 0xA1, 0xE4, 0x2B, 0xF4, 0xF3, 0xD2, 0x5F };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.ECB;
			algo.Padding = PaddingMode.PKCS7;
			algo.BlockSize = 192;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k192b192_ECB_PKCS7 Encrypt", expected, output);

			// in ECB the first 2 blocks should be equals (as the IV is not used)
			byte[] block1 = new byte[blockLength];
			Array.Copy (output, 0, block1, 0, blockLength);
			byte[] block2 = new byte[blockLength];
			Array.Copy (output, blockLength, block2, 0, blockLength);
			AssertEquals ("k192b192_ECB_PKCS7 b1==b2", block1, block2);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k192b192_ECB_PKCS7 Decrypt", input, original);
		}

		[Test]
		public void k192b192_CBC_None ()
		{
			byte[] key = { 0x21, 0x15, 0x8D, 0x66, 0x7D, 0x81, 0xD6, 0xBD, 0xFF, 0x6D, 0x3F, 0x44, 0x43, 0x0E, 0xD7, 0x07, 0xC9, 0x5F, 0xFF, 0x0A, 0x88, 0x2D, 0xC1, 0xC4 };
			byte[] iv = { 0x43, 0x68, 0xF9, 0x7E, 0xD4, 0x6D, 0xB9, 0xA7, 0x9D, 0xFF, 0x68, 0x7F, 0x4F, 0xBB, 0x14, 0x4D, 0x29, 0x4F, 0x94, 0x8A, 0x83, 0x02, 0x77, 0x1E };
			byte[] expected = { 0x13, 0xD5, 0x9A, 0x4A, 0x96, 0x7E, 0x4F, 0x67, 0x12, 0x31, 0x9B, 0xF5, 0xC5, 0x5A, 0x81, 0xC2, 0x43, 0x51, 0x57, 0x6D, 0xA2, 0xFC, 0x5F, 0x00, 0x49, 0x5A, 0x4E, 0x82, 0x3C, 0xE0, 0x7A, 0x89, 0x2F, 0x36, 0xB3, 0x84, 0x6E, 0x9B, 0x9A, 0xAA, 0x48, 0x1B, 0x0D, 0xA1, 0x42, 0xAD, 0x6F, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.CBC;
			algo.Padding = PaddingMode.None;
			algo.BlockSize = 192;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k192b192_CBC_None Encrypt", expected, output);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k192b192_CBC_None Decrypt", input, original);
		}

		[Test]
		public void k192b192_CBC_Zeros ()
		{
			byte[] key = { 0x81, 0x6F, 0xD7, 0x01, 0xCF, 0x7E, 0x73, 0x8E, 0x18, 0xB7, 0x91, 0x85, 0x70, 0x3B, 0x87, 0xCE, 0xA7, 0xB5, 0xB9, 0xFA, 0x30, 0x3D, 0x26, 0x28 };
			byte[] iv = { 0x5B, 0x34, 0x00, 0xA3, 0x3F, 0xEA, 0x2C, 0xAF, 0x87, 0xA3, 0xB9, 0x15, 0xF8, 0x61, 0x4A, 0x5C, 0x23, 0x2A, 0xF3, 0xA6, 0x7B, 0xFB, 0xEA, 0x1E };
			//byte[] expected = { 0xF4, 0x87, 0x7B, 0xC8, 0x41, 0x2C, 0x8E, 0x2C, 0x58, 0x50, 0x6E, 0xE5, 0x79, 0xD1, 0xE8, 0x54, 0xE2, 0x13, 0x55, 0x91, 0x60, 0xF0, 0x35, 0x2D, 0xDB, 0x3A, 0x69, 0x92, 0x3B, 0xD1, 0x6D, 0x89, 0x57, 0x17, 0x2F, 0x31, 0xA1, 0xD9, 0xB1, 0x00, 0x41, 0x54, 0x0C, 0xFC, 0xA4, 0xE0, 0x7F, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.CBC;
			algo.Padding = PaddingMode.Zeros;
			algo.BlockSize = 192;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			// some exception can be normal... other not so!
			try {
				Encrypt (encryptor, input, output);
			}
			catch (Exception e) {
				if (e.Message != "Input buffer contains insufficient data. ")
					Assert.Fail ("k192b192_CBC_Zeros: This isn't the expected exception: " + e.ToString ());
			}
		}

		[Test]
		public void k192b192_CBC_PKCS7 ()
		{
			byte[] key = { 0xF4, 0x68, 0x87, 0x59, 0x32, 0x8D, 0x10, 0xA8, 0xC1, 0x32, 0xD0, 0xEC, 0xE5, 0x4A, 0x8A, 0x11, 0x3E, 0x8E, 0x11, 0x48, 0x88, 0xE9, 0xC1, 0x1A };
			byte[] iv = { 0x72, 0xD8, 0x59, 0x64, 0xD0, 0x23, 0x1E, 0x6F, 0xF9, 0x16, 0x98, 0x61, 0x09, 0xE1, 0x33, 0xE2, 0x62, 0xB7, 0x9D, 0xD2, 0xCD, 0x5B, 0x47, 0xD8 };
			byte[] expected = { 0x0B, 0x3C, 0xDD, 0x1F, 0xCA, 0x36, 0x1C, 0x44, 0x0D, 0xC6, 0xC9, 0xF8, 0xE9, 0x96, 0x33, 0x52, 0x89, 0x66, 0x73, 0x9C, 0x43, 0x27, 0x76, 0xE4, 0x84, 0x4F, 0xEF, 0x68, 0x04, 0x83, 0x68, 0x1A, 0x08, 0xA5, 0x6C, 0x22, 0x83, 0x64, 0xD5, 0x9E, 0x58, 0x00, 0x5F, 0xEB, 0x6A, 0xEF, 0x36, 0xDD, 0xD4, 0xF4, 0x21, 0x9F, 0xAB, 0x87, 0xB3, 0xD0, 0x29, 0x04, 0x19, 0x14, 0xD1, 0xD1, 0x66, 0x37, 0x54, 0xBC, 0x40, 0x43, 0xF6, 0xF1, 0x8A, 0x67 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.CBC;
			algo.Padding = PaddingMode.PKCS7;
			algo.BlockSize = 192;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k192b192_CBC_PKCS7 Encrypt", expected, output);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k192b192_CBC_PKCS7 Decrypt", input, original);
		}


		/* Invalid parameters k192b192_CTS_None. Why? Specified cipher mode is not valid for this algorithm. */

		/* Invalid parameters k192b192_CTS_Zeros. Why? Specified cipher mode is not valid for this algorithm. */

		/* Invalid parameters k192b192_CTS_PKCS7. Why? Specified cipher mode is not valid for this algorithm. */

		/* Invalid parameters k192b192_CFB8_None. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k192b192_CFB8_Zeros. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k192b192_CFB8_PKCS7. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k192b192_OFB8_None. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k192b192_OFB8_Zeros. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k192b192_OFB8_PKCS7. Why? Output feedback mode (OFB) is not supported by this implementation. */

		[Test]
		public void k192b256_ECB_None ()
		{
			byte[] key = { 0x07, 0xD5, 0xDE, 0x67, 0xAA, 0x99, 0x89, 0x35, 0x41, 0xAA, 0x04, 0x7B, 0xBB, 0x25, 0x91, 0x88, 0xDA, 0xA9, 0x5F, 0xD6, 0x05, 0xA4, 0xF4, 0x7B };
			// not used for ECB but make the code more uniform
			byte[] iv = { 0x21, 0x43, 0xAF, 0xF7, 0x20, 0x60, 0x95, 0x40, 0x42, 0x57, 0x2E, 0x1D, 0xAC, 0x95, 0x39, 0x71, 0x88, 0xDA, 0xC2, 0x22, 0xF4, 0xEA, 0xC8, 0x6F, 0x3B, 0x73, 0xBC, 0xA5, 0xC9, 0x56, 0x2B, 0x38 };
			byte[] expected = { 0xDA, 0xB8, 0xB7, 0xA7, 0x7D, 0x50, 0x08, 0x6A, 0x57, 0x3C, 0x1E, 0xA4, 0xED, 0xDD, 0x3F, 0x93, 0x99, 0x7E, 0xFC, 0x06, 0x3A, 0x9E, 0xAC, 0x82, 0x16, 0xCA, 0xE5, 0x79, 0x2C, 0xA1, 0xAC, 0x5D, 0xDA, 0xB8, 0xB7, 0xA7, 0x7D, 0x50, 0x08, 0x6A, 0x57, 0x3C, 0x1E, 0xA4, 0xED, 0xDD, 0x3F, 0x93, 0x99, 0x7E, 0xFC, 0x06, 0x3A, 0x9E, 0xAC, 0x82, 0x16, 0xCA, 0xE5, 0x79, 0x2C, 0xA1, 0xAC, 0x5D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.ECB;
			algo.Padding = PaddingMode.None;
			algo.BlockSize = 256;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k192b256_ECB_None Encrypt", expected, output);

			// in ECB the first 2 blocks should be equals (as the IV is not used)
			byte[] block1 = new byte[blockLength];
			Array.Copy (output, 0, block1, 0, blockLength);
			byte[] block2 = new byte[blockLength];
			Array.Copy (output, blockLength, block2, 0, blockLength);
			AssertEquals ("k192b256_ECB_None b1==b2", block1, block2);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k192b256_ECB_None Decrypt", input, original);
		}

		[Test]
		public void k192b256_ECB_Zeros ()
		{
			byte[] key = { 0xE4, 0x87, 0x99, 0x8B, 0xD1, 0x33, 0x03, 0x25, 0x1A, 0xE4, 0x10, 0x6F, 0xC7, 0x7F, 0xC2, 0xDA, 0xAC, 0x99, 0x02, 0xFF, 0x34, 0xEF, 0x10, 0xC0 };
			// not used for ECB but make the code more uniform
			byte[] iv = { 0x67, 0xA7, 0x6E, 0xF5, 0xD8, 0xE2, 0xC3, 0xCB, 0x03, 0xF4, 0x6A, 0x01, 0x71, 0x8E, 0x02, 0xC7, 0x71, 0x73, 0xCF, 0x22, 0x76, 0x15, 0x87, 0x4F, 0x0D, 0x07, 0x43, 0xA6, 0x26, 0xAD, 0x15, 0xDA };
			//byte[] expected = { 0xAB, 0x82, 0x14, 0x0D, 0x94, 0x36, 0x61, 0x9D, 0xF9, 0x39, 0xDA, 0x44, 0x34, 0xBA, 0x0D, 0xF5, 0xE6, 0xD2, 0x68, 0x53, 0x60, 0xC6, 0x98, 0x39, 0x4C, 0x90, 0xBE, 0xF6, 0x6E, 0xD8, 0xCB, 0xAA, 0xAB, 0x82, 0x14, 0x0D, 0x94, 0x36, 0x61, 0x9D, 0xF9, 0x39, 0xDA, 0x44, 0x34, 0xBA, 0x0D, 0xF5, 0xE6, 0xD2, 0x68, 0x53, 0x60, 0xC6, 0x98, 0x39, 0x4C, 0x90, 0xBE, 0xF6, 0x6E, 0xD8, 0xCB, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.ECB;
			algo.Padding = PaddingMode.Zeros;
			algo.BlockSize = 256;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			// some exception can be normal... other not so!
			try {
				Encrypt (encryptor, input, output);
			}
			catch (Exception e) {
				if (e.Message != "Input buffer contains insufficient data. ")
					Assert.Fail ("k192b256_ECB_Zeros: This isn't the expected exception: " + e.ToString ());
			}
		}

		[Test]
		public void k192b256_ECB_PKCS7 ()
		{
			byte[] key = { 0x15, 0x40, 0x0B, 0xA3, 0xFC, 0x69, 0xF7, 0x2B, 0x55, 0x6F, 0xE9, 0x2C, 0xDA, 0xF8, 0x49, 0xAA, 0x41, 0xB3, 0x3B, 0x61, 0xCA, 0x88, 0x58, 0x19 };
			// not used for ECB but make the code more uniform
			byte[] iv = { 0xCB, 0x37, 0xA1, 0x13, 0x44, 0x0D, 0x72, 0xC0, 0x8B, 0x0E, 0x62, 0xDB, 0xAF, 0x8D, 0x00, 0xC1, 0xF6, 0xF7, 0x2B, 0x60, 0x58, 0x09, 0x46, 0x95, 0x28, 0x9C, 0x87, 0x30, 0xE9, 0xA2, 0x95, 0x80 };
			byte[] expected = { 0xBE, 0x93, 0xB9, 0xEF, 0xC7, 0x57, 0x71, 0xD9, 0xFA, 0x17, 0x6F, 0x9D, 0xBE, 0x2A, 0xF2, 0xE8, 0x17, 0x39, 0x61, 0x6A, 0xEE, 0x51, 0x6D, 0x65, 0xEE, 0x27, 0x50, 0x82, 0xFB, 0x91, 0xFC, 0xDB, 0xBE, 0x93, 0xB9, 0xEF, 0xC7, 0x57, 0x71, 0xD9, 0xFA, 0x17, 0x6F, 0x9D, 0xBE, 0x2A, 0xF2, 0xE8, 0x17, 0x39, 0x61, 0x6A, 0xEE, 0x51, 0x6D, 0x65, 0xEE, 0x27, 0x50, 0x82, 0xFB, 0x91, 0xFC, 0xDB, 0x72, 0x86, 0xCA, 0xC3, 0x5C, 0x0F, 0x55, 0x79, 0x32, 0x96, 0x07, 0x86, 0xD7, 0xF3, 0x23, 0x53, 0xFC, 0x63, 0xBC, 0xD1, 0x76, 0x33, 0x7F, 0x72, 0xF1, 0x0A, 0x60, 0x7F, 0xB2, 0x6A, 0xBA, 0x0B };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.ECB;
			algo.Padding = PaddingMode.PKCS7;
			algo.BlockSize = 256;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k192b256_ECB_PKCS7 Encrypt", expected, output);

			// in ECB the first 2 blocks should be equals (as the IV is not used)
			byte[] block1 = new byte[blockLength];
			Array.Copy (output, 0, block1, 0, blockLength);
			byte[] block2 = new byte[blockLength];
			Array.Copy (output, blockLength, block2, 0, blockLength);
			AssertEquals ("k192b256_ECB_PKCS7 b1==b2", block1, block2);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k192b256_ECB_PKCS7 Decrypt", input, original);
		}

		[Test]
		public void k192b256_CBC_None ()
		{
			byte[] key = { 0x3E, 0xFE, 0x6E, 0xF9, 0x4A, 0xCE, 0x96, 0xB7, 0xDD, 0x34, 0x15, 0x20, 0x85, 0xEA, 0x4B, 0x41, 0xEC, 0xFC, 0xDD, 0x37, 0xD9, 0xF1, 0x9A, 0xE4 };
			byte[] iv = { 0x04, 0x89, 0x29, 0x3F, 0x6A, 0x54, 0xED, 0xF3, 0x8D, 0x1F, 0x62, 0xC8, 0x8C, 0x05, 0x89, 0x62, 0xC2, 0x5E, 0xDB, 0xCA, 0x60, 0xE0, 0x17, 0x03, 0xE5, 0x69, 0x6B, 0x84, 0x44, 0x2C, 0x68, 0xB0 };
			byte[] expected = { 0xA5, 0xCB, 0x68, 0xA8, 0x8A, 0xE0, 0xFD, 0x68, 0xB3, 0x75, 0x51, 0xB8, 0x46, 0x08, 0xEC, 0xE3, 0xDA, 0xE9, 0xBF, 0x49, 0x65, 0x74, 0x84, 0xB7, 0x9A, 0x60, 0x89, 0x43, 0xF2, 0x35, 0xC2, 0xAB, 0x3F, 0xD3, 0x0A, 0x9A, 0x6A, 0x3D, 0xB4, 0x2C, 0xB0, 0x8B, 0x32, 0x28, 0x2B, 0x57, 0x8F, 0x2E, 0xCF, 0x37, 0x24, 0x9B, 0xB5, 0x3B, 0xE6, 0x5E, 0xA7, 0xB9, 0x10, 0x99, 0x36, 0xA7, 0x9C, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.CBC;
			algo.Padding = PaddingMode.None;
			algo.BlockSize = 256;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k192b256_CBC_None Encrypt", expected, output);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k192b256_CBC_None Decrypt", input, original);
		}

		[Test]
		public void k192b256_CBC_Zeros ()
		{
			byte[] key = { 0xB6, 0x93, 0x96, 0xA4, 0xD3, 0xE5, 0x73, 0x81, 0x17, 0x7B, 0x68, 0x92, 0x3A, 0xAF, 0x20, 0x45, 0x75, 0xBA, 0x43, 0x3C, 0x5E, 0x46, 0xF6, 0x15 };
			byte[] iv = { 0x17, 0x23, 0x3C, 0x0C, 0x51, 0xE2, 0x02, 0x8C, 0xC8, 0xD5, 0x5B, 0x00, 0x20, 0xE0, 0x2A, 0xC4, 0x4F, 0xCF, 0x4C, 0x1A, 0xCD, 0x59, 0x6C, 0x2D, 0x50, 0x8E, 0xF9, 0xA0, 0x3F, 0xFD, 0x81, 0xB5 };
			//byte[] expected = { 0x93, 0xF0, 0xFC, 0x25, 0x3D, 0x6D, 0x74, 0x1F, 0x88, 0xC9, 0x9F, 0xE6, 0x3A, 0x24, 0x13, 0xE1, 0x7C, 0xEF, 0x79, 0xC6, 0x56, 0x87, 0xCB, 0xD0, 0xB7, 0x15, 0x91, 0x21, 0x7E, 0x17, 0xA2, 0xF1, 0xA6, 0xDA, 0xCA, 0xDF, 0x14, 0x88, 0x5C, 0x35, 0x13, 0x1E, 0xCD, 0x2E, 0xB0, 0xC8, 0x7E, 0x4A, 0xBE, 0xD9, 0x3B, 0x15, 0x8D, 0xC9, 0x2A, 0xC5, 0x2D, 0x7C, 0x24, 0xF3, 0xB4, 0x43, 0xDE, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.CBC;
			algo.Padding = PaddingMode.Zeros;
			algo.BlockSize = 256;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			// some exception can be normal... other not so!
			try {
				Encrypt (encryptor, input, output);
			}
			catch (Exception e) {
				if (e.Message != "Input buffer contains insufficient data. ")
					Assert.Fail ("k192b256_CBC_Zeros: This isn't the expected exception: " + e.ToString ());
			}
		}

		[Test]
		public void k192b256_CBC_PKCS7 ()
		{
			byte[] key = { 0x5B, 0x58, 0xA2, 0xF7, 0x12, 0x9B, 0xF1, 0x09, 0x14, 0x98, 0x6F, 0x75, 0x69, 0xF0, 0xB5, 0x02, 0xDE, 0x7E, 0xF3, 0xBF, 0x56, 0x69, 0xEC, 0x5C };
			byte[] iv = { 0x2E, 0x75, 0x1D, 0x3D, 0x2C, 0x01, 0x0B, 0x7A, 0xE6, 0x7C, 0x63, 0xB4, 0x1A, 0xF2, 0x48, 0x62, 0xF2, 0x7A, 0xF0, 0xFA, 0xC9, 0xAD, 0xFF, 0x88, 0x45, 0xE4, 0xFE, 0x5A, 0xA2, 0x87, 0x7A, 0x16 };
			byte[] expected = { 0xD2, 0x9B, 0x71, 0x41, 0xAF, 0xD2, 0x66, 0x52, 0xB1, 0x45, 0xEA, 0x7C, 0xFD, 0xF8, 0xD5, 0x13, 0xAE, 0x3E, 0xCE, 0x84, 0x5B, 0x2A, 0xBB, 0xEA, 0x11, 0xFC, 0x45, 0x98, 0x71, 0xC0, 0x2A, 0x9B, 0xD4, 0x4B, 0xDA, 0xC9, 0xED, 0x8A, 0x86, 0x0B, 0xC4, 0x53, 0x32, 0x46, 0x00, 0x59, 0x12, 0x58, 0x12, 0x8E, 0x95, 0x20, 0xA8, 0xE0, 0x96, 0xEB, 0x62, 0xAF, 0x09, 0x04, 0xE7, 0x00, 0xCE, 0x14, 0x7D, 0x62, 0xE2, 0xE8, 0x85, 0x35, 0x7B, 0x11, 0xCD, 0xA9, 0xA4, 0x48, 0x28, 0x9A, 0xA1, 0x5A, 0x3A, 0x0D, 0x24, 0x00, 0x14, 0xEE, 0x1D, 0x99, 0x46, 0x29, 0x57, 0x56, 0x12, 0x63, 0x08, 0xB1 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.CBC;
			algo.Padding = PaddingMode.PKCS7;
			algo.BlockSize = 256;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k192b256_CBC_PKCS7 Encrypt", expected, output);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k192b256_CBC_PKCS7 Decrypt", input, original);
		}


		/* Invalid parameters k192b256_CTS_None. Why? Specified cipher mode is not valid for this algorithm. */

		/* Invalid parameters k192b256_CTS_Zeros. Why? Specified cipher mode is not valid for this algorithm. */

		/* Invalid parameters k192b256_CTS_PKCS7. Why? Specified cipher mode is not valid for this algorithm. */

		/* Invalid parameters k192b256_CFB8_None. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k192b256_CFB8_Zeros. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k192b256_CFB8_PKCS7. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k192b256_OFB8_None. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k192b256_OFB8_Zeros. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k192b256_OFB8_PKCS7. Why? Output feedback mode (OFB) is not supported by this implementation. */

		[Test]
		public void k256b192_ECB_None ()
		{
			byte[] key = { 0xE3, 0x43, 0x35, 0xDB, 0xB7, 0xC8, 0x24, 0xBF, 0x25, 0xD2, 0xA3, 0xCD, 0x70, 0xEB, 0x6B, 0xB7, 0x6D, 0x64, 0xF4, 0xB8, 0xA0, 0x56, 0x52, 0xFB, 0x3A, 0x09, 0xD4, 0xD9, 0x4F, 0x09, 0x19, 0xAF };
			// not used for ECB but make the code more uniform
			byte[] iv = { 0xDB, 0x11, 0xE4, 0x50, 0x12, 0x29, 0xC8, 0x63, 0x61, 0xEC, 0xFE, 0xD3, 0xFE, 0xA2, 0x19, 0xE0, 0xEC, 0x2F, 0x56, 0x69, 0xB7, 0x41, 0x56, 0xB0 };
			byte[] expected = { 0x66, 0xD0, 0x72, 0x3B, 0xFA, 0x3F, 0x27, 0x81, 0xB6, 0x91, 0x78, 0x7A, 0x4C, 0xD0, 0xA0, 0x4C, 0x93, 0x56, 0x51, 0xA3, 0xE0, 0x69, 0x63, 0xAF, 0x66, 0xD0, 0x72, 0x3B, 0xFA, 0x3F, 0x27, 0x81, 0xB6, 0x91, 0x78, 0x7A, 0x4C, 0xD0, 0xA0, 0x4C, 0x93, 0x56, 0x51, 0xA3, 0xE0, 0x69, 0x63, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.ECB;
			algo.Padding = PaddingMode.None;
			algo.BlockSize = 192;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k256b192_ECB_None Encrypt", expected, output);

			// in ECB the first 2 blocks should be equals (as the IV is not used)
			byte[] block1 = new byte[blockLength];
			Array.Copy (output, 0, block1, 0, blockLength);
			byte[] block2 = new byte[blockLength];
			Array.Copy (output, blockLength, block2, 0, blockLength);
			AssertEquals ("k256b192_ECB_None b1==b2", block1, block2);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k256b192_ECB_None Decrypt", input, original);
		}

		[Test]
		public void k256b192_ECB_Zeros ()
		{
			byte[] key = { 0xCF, 0xAC, 0xFC, 0x30, 0x6C, 0x01, 0x16, 0x8A, 0x82, 0x52, 0x52, 0xC0, 0xC6, 0xAC, 0x1E, 0x60, 0x93, 0x17, 0x0A, 0x0C, 0x87, 0xE1, 0x4A, 0x78, 0xD9, 0xA6, 0x6B, 0xAF, 0x24, 0xF7, 0x8F, 0xED };
			// not used for ECB but make the code more uniform
			byte[] iv = { 0x99, 0x2B, 0x6B, 0x30, 0x56, 0x13, 0x2E, 0xE3, 0x3B, 0x2B, 0xC1, 0xA9, 0x4B, 0x3B, 0xD9, 0xC3, 0x7B, 0xA7, 0x4F, 0x26, 0xC9, 0x62, 0xC9, 0x66 };
			//byte[] expected = { 0x22, 0x6B, 0xFA, 0x34, 0x8E, 0x09, 0xC2, 0xDF, 0xCA, 0x6C, 0xF5, 0x1F, 0xD2, 0xDC, 0x01, 0xC6, 0x3B, 0x73, 0x3F, 0x64, 0x91, 0x9F, 0xF6, 0xD3, 0x22, 0x6B, 0xFA, 0x34, 0x8E, 0x09, 0xC2, 0xDF, 0xCA, 0x6C, 0xF5, 0x1F, 0xD2, 0xDC, 0x01, 0xC6, 0x3B, 0x73, 0x3F, 0x64, 0x91, 0x9F, 0xF6, 0xD3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.ECB;
			algo.Padding = PaddingMode.Zeros;
			algo.BlockSize = 192;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			// some exception can be normal... other not so!
			try {
				Encrypt (encryptor, input, output);
			}
			catch (Exception e) {
				if (e.Message != "Input buffer contains insufficient data. ")
					Assert.Fail ("k256b192_ECB_Zeros: This isn't the expected exception: " + e.ToString ());
			}
		}

		[Test]
		public void k256b192_ECB_PKCS7 ()
		{
			byte[] key = { 0x17, 0xF9, 0x4A, 0x56, 0x22, 0x77, 0x20, 0x33, 0x48, 0xCB, 0x06, 0x86, 0x44, 0x02, 0xCF, 0x52, 0xDA, 0x22, 0x36, 0x07, 0xE9, 0x9F, 0x3A, 0x28, 0x3E, 0xCB, 0x49, 0x51, 0xA4, 0x67, 0x60, 0xF3 };
			// not used for ECB but make the code more uniform
			byte[] iv = { 0x07, 0x77, 0x47, 0xC3, 0x49, 0x85, 0x7D, 0xB7, 0xED, 0xF3, 0x0D, 0x3F, 0x0F, 0xDC, 0xA6, 0x3E, 0x01, 0x53, 0x4D, 0x61, 0xEC, 0x06, 0xB4, 0xA0 };
			byte[] expected = { 0xA0, 0x34, 0x6F, 0xFD, 0x84, 0xA3, 0x54, 0xC0, 0x7E, 0xCC, 0x7D, 0x02, 0xE5, 0xDA, 0x79, 0x4E, 0xC6, 0xEB, 0xCE, 0x42, 0xD2, 0xBE, 0x68, 0x0F, 0xA0, 0x34, 0x6F, 0xFD, 0x84, 0xA3, 0x54, 0xC0, 0x7E, 0xCC, 0x7D, 0x02, 0xE5, 0xDA, 0x79, 0x4E, 0xC6, 0xEB, 0xCE, 0x42, 0xD2, 0xBE, 0x68, 0x0F, 0xBC, 0x22, 0x09, 0x5B, 0xFA, 0x92, 0x7E, 0xD8, 0xFF, 0x6A, 0xDD, 0x43, 0x63, 0x72, 0x23, 0xBA, 0xF9, 0xC8, 0x06, 0x3F, 0x51, 0xE8, 0x14, 0xE7 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.ECB;
			algo.Padding = PaddingMode.PKCS7;
			algo.BlockSize = 192;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k256b192_ECB_PKCS7 Encrypt", expected, output);

			// in ECB the first 2 blocks should be equals (as the IV is not used)
			byte[] block1 = new byte[blockLength];
			Array.Copy (output, 0, block1, 0, blockLength);
			byte[] block2 = new byte[blockLength];
			Array.Copy (output, blockLength, block2, 0, blockLength);
			AssertEquals ("k256b192_ECB_PKCS7 b1==b2", block1, block2);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k256b192_ECB_PKCS7 Decrypt", input, original);
		}

		[Test]
		public void k256b192_CBC_None ()
		{
			byte[] key = { 0x7A, 0x26, 0xAB, 0x32, 0x31, 0x49, 0x69, 0x3D, 0x68, 0x5A, 0xAC, 0x1B, 0x63, 0x85, 0x5A, 0x3D, 0xC4, 0xDE, 0xA8, 0x76, 0x00, 0x26, 0x78, 0x31, 0xB6, 0x30, 0xD8, 0xCB, 0x7E, 0xE7, 0xE9, 0x5B };
			byte[] iv = { 0x9D, 0x7B, 0xD5, 0x59, 0xCA, 0x42, 0xCB, 0x2F, 0x02, 0x65, 0xFE, 0x85, 0x63, 0xAE, 0x14, 0x4F, 0x69, 0xAA, 0xC2, 0xAF, 0x06, 0xF0, 0x48, 0x4F };
			byte[] expected = { 0x6C, 0x03, 0x84, 0x1C, 0x4E, 0xE0, 0x05, 0x67, 0xEA, 0x8D, 0x1C, 0x41, 0xFD, 0xC2, 0x90, 0x0E, 0xB9, 0xAA, 0xE5, 0xA0, 0x41, 0x62, 0xFE, 0xD8, 0x57, 0xA1, 0xCE, 0x33, 0x22, 0x09, 0xDB, 0x3B, 0xD7, 0x0A, 0x68, 0x61, 0x76, 0xB9, 0x8F, 0x7E, 0xE8, 0xD9, 0xA0, 0x46, 0x2B, 0x15, 0xC3, 0xF9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.CBC;
			algo.Padding = PaddingMode.None;
			algo.BlockSize = 192;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k256b192_CBC_None Encrypt", expected, output);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k256b192_CBC_None Decrypt", input, original);
		}

		[Test]
		public void k256b192_CBC_Zeros ()
		{
			byte[] key = { 0x35, 0x14, 0xF8, 0xDB, 0xB0, 0x84, 0x94, 0xD3, 0xDD, 0xE1, 0xB3, 0x21, 0x44, 0xE2, 0x9C, 0x65, 0x0A, 0x4A, 0x28, 0x7C, 0xD7, 0xD4, 0x9F, 0x49, 0x05, 0x23, 0x2C, 0xB2, 0x65, 0x17, 0x44, 0x2E };
			byte[] iv = { 0xD8, 0xA5, 0x77, 0x5C, 0x54, 0x79, 0x57, 0xE2, 0xBD, 0xF7, 0xD1, 0xF1, 0x6F, 0x52, 0x99, 0xBE, 0x04, 0x5E, 0x75, 0x51, 0xA6, 0x7D, 0xB9, 0x88 };
			//byte[] expected = { 0xC8, 0x93, 0x1E, 0xED, 0x3F, 0x9F, 0x79, 0x34, 0x6C, 0x3F, 0x99, 0x4A, 0x25, 0xAF, 0x86, 0xDF, 0xDF, 0x19, 0x65, 0xE8, 0xAD, 0x75, 0x43, 0x1B, 0xCD, 0x1B, 0x15, 0x23, 0xC4, 0x49, 0x07, 0x31, 0x3E, 0xA2, 0x34, 0x58, 0xA0, 0x82, 0x9F, 0xF8, 0xB7, 0xB1, 0xBE, 0x59, 0xF1, 0x09, 0x5E, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.CBC;
			algo.Padding = PaddingMode.Zeros;
			algo.BlockSize = 192;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			// some exception can be normal... other not so!
			try {
				Encrypt (encryptor, input, output);
			}
			catch (Exception e) {
				if (e.Message != "Input buffer contains insufficient data. ")
					Assert.Fail ("k256b192_CBC_Zeros: This isn't the expected exception: " + e.ToString ());
			}
		}

		[Test]
		public void k256b192_CBC_PKCS7 ()
		{
			byte[] key = { 0x18, 0x60, 0x4C, 0x76, 0x3D, 0x08, 0x05, 0x18, 0x66, 0xA8, 0xA5, 0x59, 0x9E, 0xB1, 0x12, 0x83, 0x70, 0x81, 0x40, 0x82, 0x09, 0xE4, 0x36, 0x41, 0xBB, 0x72, 0x53, 0xF3, 0xB6, 0x23, 0xAE, 0xB9 };
			byte[] iv = { 0xA9, 0xC1, 0x7A, 0x1D, 0xAF, 0x14, 0xFA, 0x7D, 0xEF, 0x7F, 0xDE, 0x9E, 0xE9, 0xD6, 0x1D, 0x61, 0x46, 0x2B, 0xC9, 0x24, 0x40, 0x0A, 0xE9, 0x9C };
			byte[] expected = { 0x9B, 0xE4, 0x1F, 0x94, 0xB2, 0x6B, 0x3E, 0x70, 0x69, 0x18, 0xCD, 0x65, 0xB7, 0xD9, 0xD9, 0x8E, 0xBB, 0xDA, 0xED, 0x5C, 0x84, 0xBA, 0x52, 0x4C, 0xA2, 0x66, 0xB8, 0x20, 0xEC, 0xB4, 0x16, 0xF1, 0x4C, 0xA2, 0xD0, 0x5F, 0x48, 0xDF, 0xA1, 0xDA, 0xEF, 0x75, 0xA8, 0x02, 0xCA, 0x57, 0x2E, 0x61, 0x94, 0x6A, 0x63, 0xFF, 0xBF, 0x2D, 0x44, 0x29, 0x38, 0x24, 0x50, 0x16, 0xE4, 0x41, 0x12, 0xBB, 0xF6, 0x67, 0x0A, 0xCF, 0x0A, 0xC9, 0x89, 0x55 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.CBC;
			algo.Padding = PaddingMode.PKCS7;
			algo.BlockSize = 192;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k256b192_CBC_PKCS7 Encrypt", expected, output);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k256b192_CBC_PKCS7 Decrypt", input, original);
		}


		/* Invalid parameters k256b192_CTS_None. Why? Specified cipher mode is not valid for this algorithm. */

		/* Invalid parameters k256b192_CTS_Zeros. Why? Specified cipher mode is not valid for this algorithm. */

		/* Invalid parameters k256b192_CTS_PKCS7. Why? Specified cipher mode is not valid for this algorithm. */

		/* Invalid parameters k256b192_CFB8_None. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k256b192_CFB8_Zeros. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k256b192_CFB8_PKCS7. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k256b192_OFB8_None. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k256b192_OFB8_Zeros. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k256b192_OFB8_PKCS7. Why? Output feedback mode (OFB) is not supported by this implementation. */

		[Test]
		public void k256b256_ECB_None ()
		{
			byte[] key = { 0x04, 0x93, 0xC7, 0x1A, 0x3A, 0x62, 0x1E, 0x8B, 0x82, 0x6A, 0x20, 0x26, 0x5E, 0x29, 0x15, 0x0D, 0xCB, 0xD9, 0x49, 0x8A, 0x3E, 0x91, 0xE0, 0x8C, 0xE0, 0x9D, 0x8E, 0x15, 0x43, 0xE3, 0x1F, 0x9A };
			// not used for ECB but make the code more uniform
			byte[] iv = { 0x41, 0x3B, 0xE7, 0x01, 0x40, 0xB6, 0xB9, 0x54, 0x24, 0x38, 0x38, 0xB5, 0x8C, 0x90, 0x8D, 0x90, 0x9D, 0x68, 0xE6, 0x9C, 0x92, 0xCD, 0x95, 0x77, 0x96, 0xC6, 0xE8, 0xD5, 0xA5, 0x3E, 0xBD, 0xB9 };
			byte[] expected = { 0x2F, 0x30, 0x0F, 0xA2, 0x9C, 0x0E, 0xCA, 0x38, 0xD5, 0x43, 0xB6, 0xD4, 0xF9, 0x16, 0x65, 0xB8, 0xAA, 0x29, 0xB8, 0x16, 0xB7, 0x62, 0xE5, 0xFD, 0xC3, 0x4C, 0xA7, 0x7B, 0xC7, 0xF5, 0x5C, 0x1E, 0x2F, 0x30, 0x0F, 0xA2, 0x9C, 0x0E, 0xCA, 0x38, 0xD5, 0x43, 0xB6, 0xD4, 0xF9, 0x16, 0x65, 0xB8, 0xAA, 0x29, 0xB8, 0x16, 0xB7, 0x62, 0xE5, 0xFD, 0xC3, 0x4C, 0xA7, 0x7B, 0xC7, 0xF5, 0x5C, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.ECB;
			algo.Padding = PaddingMode.None;
			algo.BlockSize = 256;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k256b256_ECB_None Encrypt", expected, output);

			// in ECB the first 2 blocks should be equals (as the IV is not used)
			byte[] block1 = new byte[blockLength];
			Array.Copy (output, 0, block1, 0, blockLength);
			byte[] block2 = new byte[blockLength];
			Array.Copy (output, blockLength, block2, 0, blockLength);
			AssertEquals ("k256b256_ECB_None b1==b2", block1, block2);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k256b256_ECB_None Decrypt", input, original);
		}

		[Test]
		public void k256b256_ECB_Zeros ()
		{
			byte[] key = { 0x52, 0x21, 0xDF, 0x3C, 0x96, 0x67, 0x86, 0x28, 0x80, 0x97, 0x12, 0xBB, 0xDD, 0x80, 0xE1, 0x04, 0xC8, 0x4B, 0x12, 0x3E, 0x28, 0x3F, 0x32, 0x38, 0xC8, 0xA0, 0x12, 0xFA, 0xFE, 0x8C, 0x0C, 0xEC };
			// not used for ECB but make the code more uniform
			byte[] iv = { 0xA9, 0x41, 0xB0, 0xE2, 0x23, 0x9A, 0x75, 0x56, 0x5F, 0x5D, 0xB8, 0x0B, 0xB1, 0xF1, 0x0F, 0xC2, 0x50, 0xBF, 0xA7, 0x3B, 0x8A, 0x26, 0xD4, 0x82, 0x33, 0xE1, 0x77, 0x84, 0xCC, 0x47, 0xCB, 0x85 };
			//byte[] expected = { 0xB0, 0xC4, 0x5A, 0xDA, 0x21, 0x69, 0x9A, 0x80, 0xFC, 0xF4, 0xD1, 0xA5, 0xEE, 0x43, 0x44, 0x27, 0x4F, 0x42, 0x38, 0xFE, 0xC4, 0x2C, 0x75, 0x00, 0x60, 0x66, 0x1E, 0x86, 0xD0, 0xFC, 0x4B, 0x23, 0xB0, 0xC4, 0x5A, 0xDA, 0x21, 0x69, 0x9A, 0x80, 0xFC, 0xF4, 0xD1, 0xA5, 0xEE, 0x43, 0x44, 0x27, 0x4F, 0x42, 0x38, 0xFE, 0xC4, 0x2C, 0x75, 0x00, 0x60, 0x66, 0x1E, 0x86, 0xD0, 0xFC, 0x4B, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.ECB;
			algo.Padding = PaddingMode.Zeros;
			algo.BlockSize = 256;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			// some exception can be normal... other not so!
			try {
				Encrypt (encryptor, input, output);
			}
			catch (Exception e) {
				if (e.Message != "Input buffer contains insufficient data. ")
					Assert.Fail ("k256b256_ECB_Zeros: This isn't the expected exception: " + e.ToString ());
			}
		}

		[Test]
		public void k256b256_ECB_PKCS7 ()
		{
			byte[] key = { 0xC6, 0x74, 0x58, 0xA6, 0xE0, 0xAD, 0xA2, 0x2F, 0x36, 0xC1, 0xD7, 0xAC, 0xAD, 0x8E, 0x66, 0x18, 0x8B, 0xEF, 0xBF, 0x1B, 0x75, 0xF0, 0xB0, 0x96, 0xBB, 0x07, 0xE9, 0x67, 0x25, 0x1B, 0xD0, 0x46 };
			// not used for ECB but make the code more uniform
			byte[] iv = { 0x3B, 0x34, 0x5E, 0x47, 0xE3, 0x51, 0xC4, 0xE4, 0x9A, 0x66, 0xD6, 0x42, 0x1B, 0x45, 0xAB, 0x03, 0x35, 0x9A, 0x52, 0xD8, 0x1E, 0xA3, 0xC8, 0xD8, 0xBB, 0x3E, 0xD1, 0x35, 0x2C, 0x90, 0xB1, 0xC7 };
			byte[] expected = { 0x48, 0xD6, 0xD0, 0x25, 0xC7, 0x71, 0x0E, 0x10, 0xB9, 0x05, 0xE4, 0xC9, 0xEF, 0xAD, 0xB8, 0x2B, 0x14, 0xAF, 0x10, 0x53, 0x27, 0x8F, 0x32, 0x2C, 0x25, 0x9D, 0xCE, 0x64, 0x22, 0x52, 0x29, 0xCB, 0x48, 0xD6, 0xD0, 0x25, 0xC7, 0x71, 0x0E, 0x10, 0xB9, 0x05, 0xE4, 0xC9, 0xEF, 0xAD, 0xB8, 0x2B, 0x14, 0xAF, 0x10, 0x53, 0x27, 0x8F, 0x32, 0x2C, 0x25, 0x9D, 0xCE, 0x64, 0x22, 0x52, 0x29, 0xCB, 0xDF, 0x29, 0xD6, 0xDD, 0xFB, 0x89, 0x4B, 0xD7, 0x24, 0x88, 0x8E, 0x74, 0x95, 0x79, 0xBD, 0xFB, 0x80, 0xCF, 0x34, 0x7C, 0xEC, 0x2A, 0xDF, 0xBB, 0x18, 0xF6, 0xB6, 0x41, 0x00, 0xA5, 0x00, 0x55 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.ECB;
			algo.Padding = PaddingMode.PKCS7;
			algo.BlockSize = 256;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k256b256_ECB_PKCS7 Encrypt", expected, output);

			// in ECB the first 2 blocks should be equals (as the IV is not used)
			byte[] block1 = new byte[blockLength];
			Array.Copy (output, 0, block1, 0, blockLength);
			byte[] block2 = new byte[blockLength];
			Array.Copy (output, blockLength, block2, 0, blockLength);
			AssertEquals ("k256b256_ECB_PKCS7 b1==b2", block1, block2);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k256b256_ECB_PKCS7 Decrypt", input, original);
		}

		[Test]
		public void k256b256_CBC_None ()
		{
			byte[] key = { 0x2E, 0x1E, 0x55, 0x9B, 0xA8, 0x5A, 0x1D, 0x2A, 0x6B, 0x4D, 0x95, 0x8E, 0x7C, 0xFC, 0x33, 0xCE, 0x00, 0xA3, 0xFA, 0xCE, 0x9F, 0xF6, 0xED, 0x0C, 0xD5, 0x3C, 0xB0, 0xF4, 0x87, 0x26, 0x1E, 0x12 };
			byte[] iv = { 0xB2, 0xCC, 0xA6, 0x99, 0x96, 0x9C, 0xC1, 0x20, 0x2A, 0xB1, 0x00, 0x28, 0x85, 0xE1, 0xB7, 0x74, 0x66, 0x02, 0xF5, 0x69, 0xE3, 0x1F, 0xA4, 0xF4, 0xFB, 0x90, 0x3F, 0xB2, 0x7E, 0x56, 0xC9, 0x6E };
			byte[] expected = { 0x4D, 0x77, 0x53, 0xBE, 0xDB, 0xB7, 0x4D, 0x1B, 0x9B, 0x1F, 0x65, 0x7A, 0xF1, 0x8F, 0x40, 0x0D, 0x60, 0x46, 0x08, 0x8B, 0x36, 0x83, 0x91, 0x8E, 0xDC, 0x23, 0x48, 0x1F, 0x4B, 0xCB, 0x09, 0x31, 0xDB, 0x73, 0xA6, 0xF3, 0xDB, 0x98, 0x06, 0xE9, 0xFA, 0x72, 0x4F, 0xDC, 0x3A, 0xF1, 0x08, 0x7B, 0x42, 0x1E, 0xD3, 0xDB, 0x91, 0xC3, 0x2C, 0x3D, 0xD7, 0x79, 0x17, 0x2A, 0xE1, 0x3C, 0x21, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.CBC;
			algo.Padding = PaddingMode.None;
			algo.BlockSize = 256;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k256b256_CBC_None Encrypt", expected, output);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k256b256_CBC_None Decrypt", input, original);
		}

		[Test]
		public void k256b256_CBC_Zeros ()
		{
			byte[] key = { 0xEE, 0x9F, 0xAB, 0x79, 0x11, 0x3F, 0x53, 0x56, 0x4C, 0xB4, 0xC3, 0x70, 0x29, 0x03, 0xB8, 0x26, 0x8C, 0x30, 0x2A, 0xD3, 0xF2, 0x1E, 0xA3, 0x42, 0xF4, 0xE6, 0x79, 0x5B, 0x0D, 0x93, 0xCF, 0x1B };
			byte[] iv = { 0xB0, 0x2A, 0x0F, 0x47, 0x4E, 0x47, 0xDB, 0x4A, 0xF2, 0xC7, 0xEB, 0xC3, 0xFA, 0xD3, 0x89, 0x0B, 0x46, 0x17, 0xDE, 0xB9, 0x18, 0x37, 0x6E, 0x83, 0x95, 0xD6, 0xF9, 0x25, 0xB5, 0xAC, 0x86, 0x9B };
			//byte[] expected = { 0x6F, 0x0B, 0x2F, 0x3E, 0x9B, 0x07, 0xDE, 0x8B, 0xE9, 0xE7, 0xD7, 0x10, 0x09, 0xAF, 0x8E, 0x84, 0xB7, 0xBA, 0xD1, 0x79, 0x37, 0xF1, 0x25, 0xB6, 0xD7, 0xFC, 0xFB, 0x62, 0x83, 0x86, 0x8A, 0xD1, 0xC6, 0xDD, 0x98, 0x59, 0xE3, 0xEE, 0x9C, 0xA6, 0x73, 0x03, 0xE6, 0xB2, 0x72, 0xD0, 0x35, 0x39, 0xBB, 0x1C, 0x8F, 0x08, 0x8C, 0x70, 0x4C, 0x0C, 0xAD, 0xCB, 0x4F, 0x9D, 0xB7, 0x6A, 0x5F, 0xE9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.CBC;
			algo.Padding = PaddingMode.Zeros;
			algo.BlockSize = 256;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			// some exception can be normal... other not so!
			try {
				Encrypt (encryptor, input, output);
			}
			catch (Exception e) {
				if (e.Message != "Input buffer contains insufficient data. ")
					Assert.Fail ("k256b256_CBC_Zeros: This isn't the expected exception: " + e.ToString ());
			}
		}

		[Test]
		public void k256b256_CBC_PKCS7 ()
		{
			byte[] key = { 0x63, 0x95, 0x5F, 0x23, 0xFE, 0x8B, 0x49, 0x09, 0xBD, 0x05, 0x0D, 0x47, 0xCE, 0x48, 0x86, 0x02, 0x58, 0x44, 0x78, 0x21, 0x28, 0x75, 0x2E, 0x3A, 0x80, 0xE4, 0x41, 0x97, 0x0F, 0xB8, 0xA4, 0xB1 };
			byte[] iv = { 0xE1, 0xC3, 0x6B, 0x5D, 0x4F, 0x86, 0x0D, 0x44, 0xD6, 0x73, 0x21, 0x50, 0x11, 0xD3, 0x41, 0x61, 0x33, 0x04, 0x1A, 0xF8, 0x50, 0x33, 0x93, 0x4A, 0x7F, 0x9F, 0x48, 0x27, 0x8C, 0x25, 0x90, 0x93 };
			byte[] expected = { 0x1F, 0x18, 0x81, 0x2B, 0xEA, 0xE1, 0x05, 0x56, 0xF5, 0x71, 0x73, 0x8C, 0x84, 0x9C, 0x46, 0xF9, 0x18, 0xEE, 0x08, 0xB1, 0x4B, 0x96, 0xC9, 0xC9, 0x70, 0xC8, 0x3B, 0xEC, 0x15, 0x40, 0x5C, 0xA0, 0x3A, 0xD1, 0x09, 0x0C, 0xD8, 0x6F, 0xAA, 0xF5, 0x34, 0x52, 0x3A, 0x51, 0x8F, 0x3A, 0xB0, 0x3E, 0xFB, 0x31, 0x43, 0x97, 0xA3, 0x05, 0xC6, 0xF2, 0x7F, 0x2A, 0xF0, 0x4F, 0xA8, 0x64, 0xE7, 0x06, 0xFB, 0x59, 0xD3, 0xFB, 0x9E, 0x72, 0x3B, 0x11, 0xEE, 0x88, 0xEC, 0x29, 0xB2, 0x51, 0xD9, 0x58, 0x42, 0x79, 0xFC, 0x35, 0xE2, 0xF1, 0x81, 0x45, 0x8F, 0x7E, 0xE1, 0xBA, 0x95, 0xC9, 0xDD, 0x76 };

			SymmetricAlgorithm algo = Create ();
			algo.Mode = CipherMode.CBC;
			algo.Padding = PaddingMode.PKCS7;
			algo.BlockSize = 256;
			int blockLength = (algo.BlockSize >> 3);
			byte[] input = new byte [blockLength * 2 + (blockLength >> 1)];
			byte[] output = new byte [blockLength * 3];
			ICryptoTransform encryptor = algo.CreateEncryptor(key, iv);
			Encrypt (encryptor, input, output);
			AssertEquals ("k256b256_CBC_PKCS7 Encrypt", expected, output);
			byte[] reverse = new byte [blockLength * 3];
			ICryptoTransform decryptor = algo.CreateDecryptor(key, iv);
			Decrypt (decryptor, output, reverse);
			byte[] original = new byte [input.Length];
			Array.Copy (reverse, 0, original, 0, original.Length);
			AssertEquals ("k256b256_CBC_PKCS7 Decrypt", input, original);
		}


		/* Invalid parameters k256b256_CTS_None. Why? Specified cipher mode is not valid for this algorithm. */

		/* Invalid parameters k256b256_CTS_Zeros. Why? Specified cipher mode is not valid for this algorithm. */

		/* Invalid parameters k256b256_CTS_PKCS7. Why? Specified cipher mode is not valid for this algorithm. */

		/* Invalid parameters k256b256_CFB8_None. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k256b256_CFB8_Zeros. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k256b256_CFB8_PKCS7. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k256b256_OFB8_None. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k256b256_OFB8_Zeros. Why? Output feedback mode (OFB) is not supported by this implementation. */

		/* Invalid parameters k256b256_OFB8_PKCS7. Why? Output feedback mode (OFB) is not supported by this implementation. */
	}
}
